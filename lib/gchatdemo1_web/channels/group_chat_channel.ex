defmodule Gchatdemo1Web.GroupChatChannel do
  use Phoenix.Channel
  alias Gchatdemo1.Chat
  alias Gchatdemo1.Accounts  # Gi·∫£ s·ª≠ m√¥ h√¨nh ng∆∞·ªùi d√πng c·ªßa b·∫°n n·∫±m trong module Accounts

  def join("group_chat:" <> group_id, _params, socket) do
    user_id = socket.assigns[:user_id] # L·∫•y user_id t·ª´ socket

    if Chat.is_member?(group_id, user_id) do
      IO.puts("üì¢ User #{user_id} v√†o nh√≥m #{group_id}")
      {:ok, assign(socket, :group_id, group_id)}
    else
      {:error, %{reason: "not_allowed"}}
    end
  end

  def handle_in("new_message", %{"content" => content}, socket) do
    IO.puts("üî• Received new message")
    user_id = socket.assigns.user_id
    group_id = socket.assigns.group_id
    user_email = Accounts.get_user!(user_id).email

    # X√°c ƒë·ªãnh sender
    sender = if user_id == socket.assigns.user_id, do: "me", else: "other"

    case Chat.send_message(user_id, group_id, content) do
      {:ok, message} ->
        broadcast!(socket, "new_message", %{
          message: %{content: message.content},
          sender: sender,  # G·ª≠i "me" ho·∫∑c "other" thay v√¨ user_id
          email: user_email  # G·ª≠i email c√πng v·ªõi tin nh·∫Øn
        })

        {:reply, {:ok, %{status: "sent", message: message}}, socket}

      {:error, reason} ->
        {:reply, {:error, %{status: "failed", reason: inspect(reason)}}, socket}
    end
  end

  def handle_in("recall_message", %{"message_id" => message_id}, socket) do
      user_id = socket.assigns.user_id
      IO.puts("üì¢ User #{user_id} y√™u c·∫ßu thu h·ªìi tin nh·∫Øn #{message_id}")

      case Chat.recall_message(message_id, user_id) do
        {:ok, message} ->
          IO.puts("‚úÖ Tin nh·∫Øn #{message_id} ƒë√£ ƒë∆∞·ª£c thu h·ªìi")
          # G·ª≠i s·ª± ki·ªán v·ªÅ t·∫•t c·∫£ client trong nh√≥m chat
          broadcast!(socket, "message_recalled", %{message_id: message.id})
          {:reply, {:ok, %{status: "recalled"}}, socket}

        {:error, reason} ->
          IO.puts("‚ùå Kh√¥ng th·ªÉ thu h·ªìi tin nh·∫Øn #{message_id}: #{inspect(reason)}")
          {:reply, {:error, %{status: "failed", reason: inspect(reason)}}, socket}
      end
  end

  def handle_in("delete_message", %{"message_id" => message_id}, socket) do
    user_id = socket.assigns.user_id
    IO.puts("üóë User #{user_id} y√™u c·∫ßu x√≥a tin nh·∫Øn #{message_id}")

    case Chat.delete_message(message_id, user_id) do
      {:ok, message} ->
        IO.puts("‚úÖ Tin nh·∫Øn #{message_id} ƒë√£ ƒë∆∞·ª£c x√≥a")
        # G·ª≠i s·ª± ki·ªán v·ªÅ t·∫•t c·∫£ client trong nh√≥m chat
        broadcast!(socket, "message_deleted", %{message_id: message.id})
        {:reply, {:ok, %{status: "deleted"}}, socket}

      {:error, reason} ->
        IO.puts("‚ùå Kh√¥ng th·ªÉ x√≥a tin nh·∫Øn #{message_id}: #{inspect(reason)}")
        {:reply, {:error, %{status: "failed", reason: inspect(reason)}}, socket}
    end
  end

end
