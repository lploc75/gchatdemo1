import "phoenix_html"
import { Socket } from "phoenix"
import { LiveSocket } from "phoenix_live_view"
import topbar from "../vendor/topbar"
import "./chat-room.js";
import Uploaders from "./uploaders"

// C·∫•u h√¨nh STUN server c·ªßa Google
const configuration = {
  iceServers: [
    { urls: "stun:stun.l.google.com:19302", }

  ]
};

// C√°c bi·∫øn to√†n c·ª•c
let localStream;
let remoteStream;
let peerConnection;
let remoteOffer; // L∆∞u remote offer khi nh·∫≠n t·ª´ server


// Th√™m bi·∫øn to√†n c·ª•c ƒë·ªÉ l∆∞u tr·ªØ candidate t·∫°m th·ªùi
let pendingCandidates = [];

const handleCandidate = async (candidate) => {
  if (!candidate) {
    console.error("Candidate kh√¥ng h·ª£p l·ªá:", candidate);
    return;
  }

  if (!peerConnection || !peerConnection.remoteDescription) {
    console.log("üö¶ L∆∞u candidate v√†o h√†ng ƒë·ª£i:", candidate);
    pendingCandidates.push(candidate);
    return;
  }

  try {
    await peerConnection.addIceCandidate(new RTCIceCandidate(candidate));
    console.log("‚úÖ ICE candidate added:", candidate);
  } catch (err) {
    console.error("‚ùå L·ªói th√™m ICE candidate:", err);
  }
};

// Trong h√†m processPendingCandidates
const processPendingCandidates = async () => {
  console.log("üïí B·∫Øt ƒë·∫ßu x·ª≠ l√Ω candidate ƒëang ch·ªù");
  const candidates = [...pendingCandidates];
  pendingCandidates = [];
  for (const candidate of candidates) {
    try {
      await peerConnection.addIceCandidate(new RTCIceCandidate(candidate));
      console.log("‚úÖ Th√™m candidate th√†nh c√¥ng:", candidate);
    } catch (err) {
      console.error("‚ùå L·ªói th√™m candidate:", err.message, candidate);
    }
  }
  console.log("‚úÖ ƒê√£ x·ª≠ l√Ω t·∫•t c·∫£ candidate");
};


// H√†m kh·ªüi t·∫°o RTCPeerConnection
const createPeerConnection = () => {
  console.log("T·∫°o PeerConnection v·ªõi c·∫•u h√¨nh:", configuration);
  peerConnection = new RTCPeerConnection(configuration);
  console.log("ICE state ban ƒë·∫ßu:", peerConnection.iceConnectionState);

  if (!peerConnection) {
    console.error("‚ö†Ô∏è L·ªói: peerConnection ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o!");
  } else {
    // G·ªôp log t·ª´ 2 callback th√†nh 1
    peerConnection.oniceconnectionstatechange = () => {
      console.log("ICE Connection State:", peerConnection.iceConnectionState);
      if (peerConnection.iceConnectionState === "connected") {
        console.log("üéâ K·∫øt n·ªëi ICE th√†nh c√¥ng!");
      }
    };
  }
  // Th√™m trigger x·ª≠ l√Ω candidate t·ª´ c·∫£ 2 ph√≠a
  peerConnection.onnegotiationneeded = () => {
    console.log("üîÑ Y√™u c·∫ßu negotiate l·∫°i k·∫øt n·ªëi");
  };

  peerConnection.onicecandidate = (event) => {
    if (event.candidate) {
      console.log("‚úÖ ICE candidate ƒë∆∞·ª£c t·∫°o:", event.candidate);
      window.pushWebRTCEvent("candidate", { candidate: event.candidate.toJSON() });
    } else {
      console.log("‚ö†Ô∏è ICE gathering k·∫øt th√∫c (kh√¥ng c√≥ candidate)");
    }
  };

  peerConnection.ontrack = (event) => {
    console.log("üì° Nh·∫≠n ƒë∆∞·ª£c track t·ª´ peer:", event.track.kind);
    const remoteVideo = document.getElementById('remote-video');
    if (!remoteVideo) {
      console.error("Kh√¥ng t√¨m th·∫•y ph·∫ßn t·ª≠ remote-video trong DOM");
      return;
    }
    if (event.track.kind === 'audio') {
      console.log("ƒê√£ nh·∫≠n ƒë∆∞·ª£c audio track.");
      // // T·∫°o m·ªôt MediaStream ch·ªâ ch·ª©a audio track
      // let audioStream = new MediaStream([event.track]);

      // // Ki·ªÉm tra v√† t·∫°o ph·∫ßn t·ª≠ audio n·∫øu ch∆∞a c√≥
      // let audioElem = document.getElementById('remote-audio');
      // if (!audioElem) {
      //   audioElem = document.createElement('audio');
      //   audioElem.id = 'remote-audio';
      //   audioElem.controls = true;
      //   document.body.appendChild(audioElem);
      // }
      // // G√°n stream cho audio element v√† ph√°t l·∫°i
      // audioElem.srcObject = audioStream;
      // audioElem.play().catch(err => console.error("L·ªói ph√°t audio:", err));

      // // --- Ph·∫ßn ghi √¢m audio ---
      // let recordedChunks = [];
      // // T·∫°o MediaRecorder v·ªõi stream audio
      // let mediaRecorder = new MediaRecorder(audioStream);

      // // Khi c√≥ d·ªØ li·ªáu ghi √¢m s·∫µn s√†ng, l∆∞u v√†o m·∫£ng recordedChunks
      // mediaRecorder.ondataavailable = (event) => {
      //   if (event.data.size > 0) {
      //     recordedChunks.push(event.data);
      //   }
      // };

      // // Khi d·ª´ng ghi √¢m, t·∫°o Blob v√† t·∫°o URL ph√°t l·∫°i
      // mediaRecorder.onstop = () => {
      //   let blob = new Blob(recordedChunks, { type: 'audio/webm' });
      //   let url = URL.createObjectURL(blob);
      //   console.log("URL c·ªßa audio ghi √¢m:", url);

      //   // T·∫°o ho·∫∑c c·∫≠p nh·∫≠t ph·∫ßn t·ª≠ audio ƒë·ªÉ ph√°t l·∫°i ƒëo·∫°n ghi √¢m
      //   let recordedAudioElem = document.getElementById('recorded-audio');
      //   if (!recordedAudioElem) {
      //     recordedAudioElem = document.createElement('audio');
      //     recordedAudioElem.id = 'recorded-audio';
      //     recordedAudioElem.controls = true;
      //     document.body.appendChild(recordedAudioElem);
      //   }
      //   recordedAudioElem.src = url;
      // };

      // // B·∫Øt ƒë·∫ßu ghi √¢m (v√≠ d·ª•: ghi trong 5 gi√¢y)
      // mediaRecorder.start();
      // console.log("ƒêang ghi √¢m audio...");
      // setTimeout(() => {
      //   mediaRecorder.stop();
      //   console.log("D·ª´ng ghi √¢m audio sau 5 gi√¢y.");
      // }, 5000);
      // // --- End ph·∫ßn ghi √¢m ---

    } else if (event.track.kind === 'video') {
      if (!remoteVideo.srcObject) {
        console.log("üé• ƒêang kh·ªüi t·∫°o remote video stream");
        remoteVideo.srcObject = new MediaStream([event.track]);
        remoteVideo.onloadedmetadata = () => {
          console.log("üé¨ Remote video ready to play");
          remoteVideo.play().catch(err => console.error("L·ªói play:", err));
        };
      }
    }
  };

  // Ki·ªÉm tra c√°c receiver sau khi remote description ƒë∆∞·ª£c ƒë·∫∑t
  setTimeout(() => {
    console.log("PeerConnection Receivers:", peerConnection.getReceivers());
  }, 1000);
};


// H√†m ch·ªù cho ƒë·∫øn khi hook WebRTC s·∫µn s√†ng
const waitForWebRTC = () => {
  return new Promise((resolve) => {
    if (window.webrtcReady) {
      console.log("WebRTC ƒë√£ s·∫µn s√†ng.");
      resolve();
    } else {
      console.log("Ch·ªù WebRTC s·∫µn s√†ng...");
      const interval = setInterval(() => {
        if (window.webrtcReady) {
          clearInterval(interval);
          console.log("WebRTC s·∫µn s√†ng sau khi ch·ªù.");
          resolve();
        }
      }, 100);
    }
  });
};

// H√†m b·∫Øt ƒë·∫ßu cu·ªôc g·ªçi (cho b√™n g·ªçi - caller)
const startCall = async () => {
  isAnswerProcessed = false; // Reset tr·∫°ng th√°i
  console.log("B·∫Øt ƒë·∫ßu cu·ªôc g·ªçi (caller)...");
  await waitForWebRTC();

  try {
    // ‚úÖ Th√™m ki·ªÉm tra sau khi l·∫•y stream
    if (peerConnection) {
      peerConnection.close();
      peerConnection = null;
    }
    localStream = await navigator.mediaDevices.getUserMedia({ video: true, audio: true });
    console.log("L·∫•y ƒë∆∞·ª£c local stream (caller):", localStream);
    const localVideo = document.getElementById("local-video");
    if (localVideo) {
      localVideo.srcObject = localStream;
      console.log("G√°n local stream cho video caller th√†nh c√¥ng.");
    } else {
      console.error("Kh√¥ng t√¨m th·∫•y ph·∫ßn t·ª≠ video local (caller).");
    }

    createPeerConnection();
    localStream.getTracks().forEach((track) => {
      console.log("Th√™m track v√†o PeerConnection (caller):", track);
      peerConnection.addTrack(track, localStream);
    });

    const offer = await peerConnection.createOffer({
      offerToReceiveAudio: true,
      offerToReceiveVideo: true
    });
    console.log("T·∫°o offer th√†nh c√¥ng (caller):", offer);
    await peerConnection.setLocalDescription(offer);
    console.log("ƒê·∫∑t local description th√†nh c√¥ng (caller):", peerConnection.localDescription);

    console.log("ƒêang g·ª≠i offer qua pushWebRTCEvent (caller)...");
    window.pushWebRTCEvent("offer", { sdp: offer.sdp, type: offer.type });
  } catch (err) {
    console.error("L·ªói khi b·∫Øt ƒë·∫ßu cu·ªôc g·ªçi (caller):", err);
  }
};

// H√†m x·ª≠ l√Ω offer nh·∫≠n ƒë∆∞·ª£c t·ª´ server (b√™n nh·∫≠n - receiver)
// Ch·ªâ l∆∞u tr·ªØ remote offer ƒë·ªÉ ch·ªù ng∆∞·ªùi d√πng b·∫•m "Tr·∫£ l·ªùi"
const handleOffer = async (offer) => {
  console.log("ƒêang l∆∞u tr·ªØ offer nh·∫≠n ƒë∆∞·ª£c (receiver):", offer);
  remoteOffer = offer.sdp || offer;
};

// H√†m x·ª≠ l√Ω khi ng∆∞·ªùi d√πng ch·∫•p nh·∫≠n cu·ªôc g·ªçi (receiver)
// H√†m n√†y s·∫Ω l·∫•y local stream, t·∫°o k·∫øt n·ªëi, √°p d·ª•ng remote offer ƒë√£ l∆∞u, t·∫°o answer v√† g·ª≠i answer l√™n server.
const acceptCall = async () => {
  console.log("Ng∆∞·ªùi d√πng ƒë√£ ch·∫•p nh·∫≠n cu·ªôc g·ªçi (receiver)");
  try {
    if (peerConnection) {
      peerConnection.close();
      peerConnection = null;
    }
    localStream = await navigator.mediaDevices.getUserMedia({ video: true, audio: true });
    console.log("L·∫•y ƒë∆∞·ª£c local stream (receiver):", localStream);
    const localVideo = document.getElementById('local-video');
    if (localVideo) localVideo.srcObject = localStream;

    createPeerConnection();
    localStream.getTracks().forEach((track) => {
      console.log("Th√™m track v√†o PeerConnection (receiver):", track);
      peerConnection.addTrack(track, localStream);
    });

    // √Åp d·ª•ng remote offer ƒë√£ l∆∞u
    const remoteOfferDesc = new RTCSessionDescription({ type: "offer", sdp: remoteOffer });
    await peerConnection.setRemoteDescription(remoteOfferDesc);
    console.log("ƒê·∫∑t remote description v·ªõi offer th√†nh c√¥ng (receiver).");
    await processPendingCandidates(); // Th√™m d√≤ng n√†y

    const answer = await peerConnection.createAnswer({
      offerToReceiveAudio: true,
      offerToReceiveVideo: true
    });
    console.log("T·∫°o answer th√†nh c√¥ng (receiver):", answer);
    await peerConnection.setLocalDescription(answer);
    console.log("ƒê·∫∑t local description v·ªõi answer th√†nh c√¥ng (receiver):", peerConnection.localDescription);

    console.log("ƒêang g·ª≠i answer qua pushWebRTCEvent (receiver)...");
    window.pushWebRTCEvent("answer", { sdp: answer.sdp, type: answer.type });
  } catch (err) {
    console.error("L·ªói khi ch·∫•p nh·∫≠n cu·ªôc g·ªçi (receiver):", err);
  }
};

let isAnswerProcessed = false;

const handleAnswer = async (answer) => {
  console.log("üîî B·∫Øt ƒë·∫ßu x·ª≠ l√Ω answer...");
  if (isAnswerProcessed) {
    console.log("üö® Answer ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω tr∆∞·ªõc ƒë√≥, b·ªè qua.");
    return;
  }
  if (!peerConnection) {
    console.log("üö® PeerConnection ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o, kh√¥ng th·ªÉ x·ª≠ l√Ω answer.");
    return;
  }
  try {
    const answerDesc = new RTCSessionDescription(answer);
    console.log("üîß ƒêang ƒë·∫∑t remote description...");
    await peerConnection.setRemoteDescription(answerDesc);
    console.log("‚úÖ ƒê·∫∑t remote description th√†nh c√¥ng");
    await processPendingCandidates();
    isAnswerProcessed = true;
  } catch (err) {
    console.error("‚ùå L·ªói x·ª≠ l√Ω answer:", err);
  }
};







const endCall = () => {
  isAnswerProcessed = false;
  console.log("K·∫øt th√∫c cu·ªôc g·ªçi.");
  // X√≥a c√°c candidate ƒëang ch·ªù
  pendingCandidates = [];
  if (peerConnection) {
    peerConnection.close();
    peerConnection = null;
    console.log("ƒê√≥ng k·∫øt n·ªëi PeerConnection th√†nh c√¥ng.");
  }
  if (localStream) {
    localStream.getTracks().forEach((track) => {
      track.stop();
      console.log("D·ª´ng track c·ªßa local stream:", track);
    });
    localStream = null;
  }
  if (remoteStream) {
    remoteStream.getTracks().forEach((track) => {
      track.stop();
      console.log("D·ª´ng track c·ªßa remote stream:", track);
    });
    remoteStream = null;
  }
  const localVideo = document.getElementById('local-video');
  const remoteVideo = document.getElementById('remote-video');
  if (localVideo) {
    localVideo.srcObject = null;
    console.log("X√≥a ngu·ªìn cho video local.");
  }
  if (remoteVideo) {
    remoteVideo.srcObject = null;
    console.log("X√≥a ngu·ªìn cho video remote.");
  }
};

let WebRTCHook = {
  mounted() {
    console.log("Hook WebRTC ƒë√£ ƒë∆∞·ª£c mount.");

    window.pushWebRTCEvent = (event, payload) => {
      console.log(`G·ªçi pushWebRTCEvent v·ªõi event: ${event}`, payload);
      this.pushEvent(event, payload);
    };

    window.webrtcReady = true;
    console.log("WebRTC s·∫µn s√†ng.");

    // Khi nh·∫≠n offer t·ª´ server, ch·ªâ l∆∞u tr·ªØ remote offer (kh√¥ng t·ª± ƒë·ªông tr·∫£ l·ªùi)
    this.handleEvent("handle_offer", async ({ sdp }) => {
      console.log("Nh·∫≠n offer - ch·ªâ l∆∞u tr·ªØ:", sdp);
      await handleOffer(sdp);
    });

    this.handleEvent("handle_answer", (payload) => {
      console.log("Nh·∫≠n answer t·ª´ server:", payload);
      handleAnswer(payload);
    });


    this.handleEvent("handle_candidate", (payload) => {
      console.log("Nh·∫≠n candidate t·ª´ server:", payload);
      handleCandidate(payload.candidate);
    });

    this.handleEvent("call_rejected", () => {
      console.log("Cu·ªôc g·ªçi b·ªã t·ª´ ch·ªëi");
      endCall();
    });
  }
};

let csrfToken = document.querySelector("meta[name='csrf-token']").getAttribute("content");

const liveSocket = new LiveSocket("/live", Socket, {
  uploaders: Uploaders,
  params: { _csrf_token: csrfToken },
  hooks: {
    WebRTC: WebRTCHook
  }
});

topbar.config({ barColors: { 0: "#29d" }, shadowColor: "rgba(0, 0, 0, .3)" });
window.addEventListener("phx:page-loading-start", _info => topbar.show(300));
window.addEventListener("phx:page-loading-stop", _info => topbar.hide());
document.addEventListener("DOMContentLoaded", () => {
  document.body.addEventListener("click", (event) => {
    const dropdown = event.target.closest(".dropdown");
    if (dropdown) {
      dropdown.classList.toggle("open");
    } else {
      document.querySelectorAll(".dropdown.open").forEach((el) => el.classList.remove("open"));
    }
  });
});
console.log("Hihi Khanh")
liveSocket.connect();
console.log("LiveSocket connected:", liveSocket.isConnected());

// L·∫Øng nghe s·ª± ki·ªán t·ª´ LiveView cho caller
window.addEventListener("phx:start_call", (event) => {
  console.log("Nh·∫≠n s·ª± ki·ªán phx:start_call t·ª´ server (caller).");
  startCall();
});
window.addEventListener("phx:end_call", (event) => {
  console.log("Nh·∫≠n s·ª± ki·ªán phx:end_call t·ª´ server.");
  endCall();
});

// L·∫Øng nghe s·ª± ki·ªán t·ª´ LiveView khi ng∆∞·ªùi d√πng b·∫•m n√∫t "Tr·∫£ l·ªùi" (s·ª± ki·ªán "user_answer")
// ·ªû ph√≠a server, b·∫°n c·∫ßn x·ª≠ l√Ω "user_answer" ƒë·ªÉ push event "accept_call" v·ªÅ client.
window.addEventListener("phx:accept_call", () => {
  acceptCall();
});

window.addEventListener("phx:handle_answer", (event) => {
  console.log("Nh·∫≠n s·ª± ki·ªán phx:handle_answer t·ª´ server:", event.detail);
  handleAnswer(event.detail);
});

window.liveSocket = liveSocket;
