import { LitElement, html, css } from 'lit';

class FriendsComponent extends LitElement {
    static properties = {
        currentUser: { type: Object },
        friends: { type: Array },
        searchedUser: { type: Object },
        status: { type: String },
        searchEmail: { type: String },
        searchMessage: { type: String }
    };

    constructor() {
        super();
        this.currentUser = null;
        this.friends = [];
        this.searchedUser = null;
        this.status = null;
        this.searchEmail = '';
        this.searchMessage = ''; // Thu·ªôc t√≠nh th√¥ng b√°o
    }

    connectedCallback() {
        super.connectedCallback();
        this.fetchFriends();
    }

    async fetchFriends() {
        try {
            console.log("üîç Fetching friends data...");
            const response = await fetch('/api/list_friends', { credentials: 'include' });
            console.log("üü¢ Response status:", response.status);

            if (!response.ok) {
                throw new Error(`Kh√¥ng th·ªÉ t·∫£i danh s√°ch b·∫°n b√®. HTTP ${response.status}`);
            }

            const data = await response.json();
            console.log("üì• Nh·∫≠n d·ªØ li·ªáu t·ª´ API:", data);

            this.currentUser = data.current_user;
            this.friends = data.friends;
            this.requestUpdate();
        } catch (error) {
            console.error("‚ùå L·ªói khi t·∫£i danh s√°ch b·∫°n b√®:", error);
        }
    }

    async searchFriend(e) {
        e.preventDefault();
        try {
            console.log("üîç Searching friend with email:", this.searchEmail);
            const response = await fetch('/api/friends', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ email: this.searchEmail }),
                credentials: 'include'
            });

            if (!response.ok) {
                throw new Error(`Kh√¥ng th·ªÉ t√¨m ki·∫øm b·∫°n b√®. HTTP ${response.status}`);
            }

            const data = await response.json();
            console.log("üì• K·∫øt qu·∫£ t√¨m ki·∫øm:", data);
            console.log("üì• friends trong d·ªØ li·ªáu:", data.friends);

            // Gi·∫£ s·ª≠ API tr·∫£ v·ªÅ thu·ªôc t√≠nh searched_user n·∫øu t√¨m th·∫•y, ng∆∞·ª£c l·∫°i tr·∫£ v·ªÅ null ho·∫∑c kh√¥ng c√≥ key n√†y
            if (data.searched_user) {
                this.searchedUser = data.searched_user;
                this.searchMessage = `T√¨m th·∫•y ng∆∞·ªùi d√πng: ${this.searchedUser.email}`;
            } else {
                this.searchedUser = null;
                this.searchMessage = 'Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng';
            }

            this.status = data.status;
            // C·∫≠p nh·∫≠t danh s√°ch b·∫°n b√® n·∫øu c·∫ßn
            this.friends = data.friends || [];
            this.requestUpdate();
        } catch (error) {
console.error("‚ùå L·ªói khi t√¨m ki·∫øm b·∫°n b√®:", error);
            this.searchMessage = 'C√≥ l·ªói x·∫£y ra trong qu√° tr√¨nh t√¨m ki·∫øm';
            this.requestUpdate();
        }
    }
    async sendFriendRequest(userId) {
        try {
            // 1. C·∫≠p nh·∫≠t UI ngay l·∫≠p t·ª©c (n·∫øu mu·ªën)
            this.status = 'pending';
            this.requestUpdate();

            // 2. G·ªçi API
            const response = await fetch(`/api/users/${userId}/send_request`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                credentials: 'include'
            });

            // 3. X·ª≠ l√Ω k·∫øt qu·∫£
            if (!response.ok) throw new Error(`HTTP ${response.status}`);

            const data = await response.json();
            console.log("Ph·∫£n h·ªìi t·ª´ server:", data);

            // 4. C·∫≠p nh·∫≠t state: n·∫øu th√†nh c√¥ng, g√°n status th√†nh 'pending'
            if (data.success) {
                this.status = 'pending';
                // C·∫≠p nh·∫≠t searchedUser n·∫øu c·∫ßn
                this.searchedUser = { ...this.searchedUser, status: 'pending' };
            }
        } catch (error) {
            console.error("‚ùå L·ªói:", error);
            this.status = null; // Rollback n·∫øu th·∫•t b·∫°i
        } finally {
            this.requestUpdate(); // ƒê·∫£m b·∫£o re-render
        }
    }



    async cancelFriendRequest(userId) {
        try {
            const response = await fetch(`/api/users/${userId}/cancel_request`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                credentials: 'include'
            });

            if (!response.ok) {
                throw new Error(`Kh√¥ng th·ªÉ h·ªßy y√™u c·∫ßu k·∫øt b·∫°n. HTTP ${response.status}`);
            }

            const data = await response.json();
            this.status = data.status;
            this.requestUpdate();
        } catch (error) {
            console.error("‚ùå L·ªói khi h·ªßy y√™u c·∫ßu k·∫øt b·∫°n:", error);
        }
    }

    async unfriend(friendId) {
        try {
            const response = await fetch(`/api/unfriend/${friendId}`, {
                method: 'DELETE',
                headers: {
                    'Content-Type': 'application/json'
                },
                credentials: 'include'
            });

            if (!response.ok) {
                throw new Error(`Kh√¥ng th·ªÉ h·ªßy k·∫øt b·∫°n. HTTP ${response.status}`);
            }

            this.friends = this.friends.filter(friend => friend.id !== friendId);
            this.requestUpdate();
        } catch (error) {
            console.error("‚ùå L·ªói khi h·ªßy k·∫øt b·∫°n:", error);
        }
    }

    updateSearchEmail(e) {
        this.searchEmail = e.target.value;
    }
    navigate(event) {
        console.log("Navigating to:", event.target.href);
        window.location.href = event.target.href; // Chuy·ªÉn h∆∞·ªõng ho√†n to√†n
        history.pushState({}, '', event.target.href);
        console.log("History updated, current path:", window.location.pathname);
    }

    render() {
        if (!this.currentUser) {
            return html`<p>ƒêang t·∫£i...</p>`;
        }

        return html`
      <h1>Danh s√°ch b·∫°n b√®</h1>

      <!-- Form t√¨m ki·∫øm b·∫°n b√® -->
      <h2>T√¨m ki·∫øm b·∫°n b√®</h2>
      <form @submit="${this.searchFriend}">
        <input
          type="email"
          .value="${this.searchEmail}"
          @input="${this.updateSearchEmail}"
          placeholder="Nh·∫≠p email th√†nh vi√™n"
          required
        />
        <button type="submit">T√¨m ki·∫øm</button>
      </form>

      <!-- Hi·ªÉn th·ªã th√¥ng b√°o k·∫øt qu·∫£ t√¨m ki·∫øm -->
      ${this.searchMessage ? html`
        <p style="color: ${this.searchedUser ? 'green' : 'red'};">${this.searchMessage}</p>
      ` : ''}

      <!-- Hi·ªÉn th·ªã k·∫øt qu·∫£ t√¨m ki·∫øm n·∫øu c√≥ -->
      ${this.searchedUser ? html`
        <h2>Th√¥ng tin ng∆∞·ªùi d√πng t√¨m th·∫•y:</h2>
        <img src="${this.searchedUser.avatar_url}" alt="avatar" class="message-avatar" />
        <p>Email: ${this.searchedUser.email}</p>
        <p>ID: ${this.searchedUser.id}</p>

        ${this.searchedUser.id !== this.currentUser.id ? html`
          ${this.status === 'pending' ? html`
            <button @click="${() => this.cancelFriendRequest(this.searchedUser.id)}">H·ªßy y√™u c·∫ßu</button>
          ` : this.status === 'accepted' ? html`
            <p>ƒê√£ l√† b·∫°n b√®</p>
          ` : html`
            <button @click="${() => this.sendFriendRequest(this.searchedUser.id)}">K·∫øt b·∫°n</button>
          `}
        ` : html`
          <p style="color: red;">(B·∫°n kh√¥ng th·ªÉ k·∫øt b·∫°n v·ªõi ch√≠nh m√¨nh)</p>
        `}
      ` : ''}

      <!-- Danh s√°ch b·∫°n b√® -->
      <h2>Danh s√°ch b·∫°n b√®</h2>
      ${Array.isArray(this.friends) && this.friends.length > 0 ? html`
        <ul>
          ${this.friends.map(friend => html`
            <li>
              <img src="${friend.avatar_url}" alt="avatar" class="message-avatar" />
              <p>Email: ${friend.email}</p>
              <p>ID: ${friend.id}</p>
              <button @click="${() => this.unfriend(friend.id)}">H·ªßy k·∫øt b·∫°n</button>
            </li>
          `)}
        </ul>
      ` : html`
        <p>B·∫°n ch∆∞a c√≥ b·∫°n b√® n√†o.</p>
      `}

      <!-- N√∫t quay l·∫°i Dashboard -->
      <a
        href="/dashboard"
        @click="${this.navigate}"
        class="inline-block px-6 py-3 bg-blue-500 text-white font-bold rounded-lg shadow-md hover:bg-blue-700 transition duration-300"
      >
        Quay l·∫°i Dashboard
      </a>
    `;
    }
}

customElements.define('list_friends-component', FriendsComponent);